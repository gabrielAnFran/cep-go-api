{
	"info": {
		"_postman_id": "d66f3366-2555-46fe-ae84-c64cfeb2ac86",
		"name": "CEP API - desafio",
		"description": "A API Desafio CEP fornece endpoints para buscar códigos postais (CEPs) em um repositório, gerar um token JWT para autenticação e verificar a saúde da API. Esta API suporta autenticação básica, retorna respostas em formato JSON e adere à Especificação OpenAPI.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24751531"
	},
	"item": [
		{
			"name": "Buscar CEP",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('rua');",
							"    pm.expect(responseData).to.have.property('bairro');",
							"    pm.expect(responseData).to.have.property('cidade');",
							"    pm.expect(responseData).to.have.property('estado');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTQ4Mzg0NzQsImlhdCI6MTcxNDgzNDg3NCwianRpIjoiMUQ4OTlEQkQtMTAxMi03NDRGLTk1QTEtMDg5NzBGNzA3RjFEIiwibmJmIjoxNzE0ODM0ODc0LCJzdWIiOjF9.Y_vkLiadyLdXUCbjoGKZ7mtAsJ1oPsSiPM1C0opzdic",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "localhost:8080/cep/99150000",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cep",
						"99150000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 100ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTQ4Mzg0NzQsImlhdCI6MTcxNDgzNDg3NCwianRpIjoiMUQ4OTlEQkQtMTAxMi03NDRGLTk1QTEtMDg5NzBGNzA3RjFEIiwibmJmIjoxNzE0ODM0ODc0LCJzdWIiOjF9.Y_vkLiadyLdXUCbjoGKZ7mtAsJ1oPsSiPM1C0opzdic",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/health-check",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"health-check"
					]
				}
			},
			"response": []
		},
		{
			"name": "Gerar Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 100ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - token\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.token).to.exist.and.to.not.be.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"email@email.com\",\n    \"senha\": \"senha\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/gerar-token/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gerar-token",
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTQ4Mzg0NzQsImlhdCI6MTcxNDgzNDg3NCwianRpIjoiMUQ4OTlEQkQtMTAxMi03NDRGLTk1QTEtMDg5NzBGNzA3RjFEIiwibmJmIjoxNzE0ODM0ODc0LCJzdWIiOjF9.Y_vkLiadyLdXUCbjoGKZ7mtAsJ1oPsSiPM1C0opzdic",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}